/// dach.t.sol -- test for dach.sol

// Copyright (C) 2019  Martin Lundfall

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

pragma solidity >=0.4.23;

import "ds-test/test.sol";
import {Vat} from 'dss/vat.sol';
import {Pot} from 'dss/pot.sol';
import {Dai} from 'dss/dai.sol';
import {DaiJoin} from 'dss/join.sol';
import "../dach.sol";
import {Cach} from "../cach.sol";
import {ChaiSetup, UniswapSetup} from "./uniswap.t.sol";

contract FactoryLike {
  function initializeFactory(address) public {}
  function createExchange(address) public returns (address) {}
}

contract Hevm {
    function warp(uint256) public;
}


contract DachTest is DSTest, ChaiSetup, UniswapSetup {

    Hevm hevm;
    uint constant initialBalance = 100;

    //    Dai dai;
    //    Chai chai;
    Dach dach;
    Cach cach;
    uint constant chainId = 99;

    address payable ali = 0x0595BBafaF6B4eAC0e41549E7E8b72193BFC68E5; //I am the greatest, I said that even before I knew I was.
    address cal = 0x29C76e6aD8f28BB1004902578Fb108c507Be341b;
    address del = 0xdd2d5D3f7f1b35b7A0601D6A00DbB7D44Af58479; //the funky homosapien
    address acab = address(0xacab);


    function setUp() public {
      super.setUp();
      dach = new Dach(address(dai), address(uniswapdai), address(chai), 99);
      cach = new Cach(address(dai), address(uniswapchai), address(chai), address(pot), 99);
    }

    function test_basic_sanity() public {
      assertTrue(true);
    }

    function test_dai_address() public {
        //The dai address generated by hevm
        //used for signature generation testing
        assertEq(address(dai), address(0x959DC1D68ba3a9f6959239135bcbc854b781eb9a));
        assertEq(address(dai), address(dach.dai()));
        assertEq(address(dai), address(cach.dai()));
    }

    function test_dach_address() public {
        //The dai address generated by hevm
        //used for signature generation testing
        assertEq(address(dach), address(0x2D6B98058E84Dcb8b57fb8C79613bD858af65975));
    }

    function test_domain_separator() public {

      assertEq(dai.DOMAIN_SEPARATOR(), 0x12bf37c2cc038856d7efae7381c12376dea490731e8ad8d1f38179218de0e433);
    }

    function permit_dach() public {
      bytes32 r = 0xf1c0d78dabeda1f1a286b062ab62bdcef88cfcfa9c4b602b9b00ac90c2f1cdc7;
      bytes32 s = 0x027754254ae85a34633d14ced0dbc31ebf912d1783523e643ec2dbe1fb20df54;
      uint8 v = 27;
      dai.permit(ali, address(dach), 0, 0, true, v, r, s);
    }

    function test_permit_dach() public { 
      assertEq(dai.nonces(ali),0);
      assertEq(dai.allowance(ali, address(dach)),0);
      permit_dach();
      assertEq(dai.allowance(ali, address(dach)),uint(-1));
      assertEq(dai.nonces(ali),1);
    }
      

    function test_cheque() public {
      permit_dach();
      assertEq(dai.balanceOf(ali), 100);
      assertEq(dach.nonces(ali),0);
      bytes32 r = 0x003e91ae9737fba5db008ed08f1a19d6131fe9addaff7925e2349d9376d6105d;
      bytes32 s = 0x2b63f1e30c16aa518734a245f5ab5016f57f0159bbfaf778a8ff72eb95ca00cc;
      uint8 v = 27;
      dach.clear(ali, del, 10, 1, 0, 0, v, r, s, acab);
      assertEq(dach.nonces(ali),1);
      assertEq(dai.balanceOf(ali), 89);
      assertEq(dai.balanceOf(del), 10);
      assertEq(dai.balanceOf(acab), 1);
    }

    function test_swap() public {
      permit_dach();
      assertEq(dai.balanceOf(ali), 100);
      assertEq(ali.balance, 0);
      assertEq(dai.balanceOf(acab), 0);
      assertEq(dach.nonces(ali),0);
      bytes32 r = 0xfdc5f33005b93d3a14faf14ffb770819a325e1e20e50b863398474dc104b622e;
      bytes32 s = 0x7984eb24ce04d417d6525096920fc64bf33e2368ceddca6bbc7789274f41051e;
      uint8 v = 27;
      dach.swapToEth(ali, 10, 332665999, 1, 0, 0, v, r, s, acab);
      assertEq(dach.nonces(ali),1);
      assertEq(dai.balanceOf(ali), 89);
      assertEq(ali.balance, 332665999);
      assertEq(dai.balanceOf(acab), 1);
    }


    
}
