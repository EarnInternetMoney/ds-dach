/// dach.t.sol -- test for dach.sol

// Copyright (C) 2019  Martin Lundfall

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

pragma solidity >=0.4.23;

import "ds-test/test.sol";

import "./dai.sol";
import "./dach.sol";

contract DachTest is DSTest {
    uint constant initialBalance = 100;

    Dai token;
    Dach dach;

    address ali = 0xbb7E27931519C861E28Dc7bA42eE707d9Df26F2e; //I am the greatest, I said that even before I knew I was.
    address del = 0xdd2d5D3f7f1b35b7A0601D6A00DbB7D44Af58479; //the funky homosapien
    address acab = address(0xacab);


    function setUp() public {
        token = createToken();
        token.mint(ali, initialBalance);
        dach = new Dach(address(token), address(0x0), '1', 1);
    }

    function createToken() internal returns (Dai) {
        return new Dai("$","TST", "1", 1);
    }

    function test_dai_address() public {
        //The dai address generated by hevm
        //used for signature generation testing
        assertEq(address(token), address(0xDB356e865AAaFa1e37764121EA9e801Af13eEb83));
    }

    function test_dach_address() public {
        //The dai address generated by hevm
        //used for signature generation testing
        assertEq(address(dach), address(0xEcEDFd8BA8ae39a6Bd346Fe9E5e0aBeA687fFF31));
    }

    function test_cheque() public {
        assertEq(token.nonces(ali),0);
        assertEq(token.allowance(ali, address(dach)),0);
        bytes32 r = 0x2fd8e7c0f51636209f92ff9cfd233ab51c6028796daae2c9a96674a504ffa7bc;
        bytes32 s = 0x3754ea9e7de8d277c2487d53cee279df7232411e2281930ef8ea9bc7d38cc77c;
        uint8 v = 27;
        token.permit(ali, address(dach), 0, 0, true, v, r, s);
        assertEq(token.allowance(ali, address(dach)),uint(-1));
        assertEq(token.nonces(ali),1);
        assertEq(token.balanceOf(ali), 100);
        r = 0x2b08167a001107f123f223c9651f73aad13e75a3a723438bb153618e78346077;
        s = 0x59f48e8efbe4ecdac8c0280ce3bcdedbe06375164bbc0cbfda40810c3631226d;
        v = 28;
        dach.clear(ali, del, 10, 1, 0, 0, v, r, s, acab);
        assertEq(token.balanceOf(ali), 89);
        assertEq(token.balanceOf(del), 10);
        assertEq(token.balanceOf(acab), 1);
    }
}
